<?php
if (!defined('ABSPATH')) { exit; }

class RSP_Module_Malware_Scanner {
    public function init() {
        // This module is AJAX-driven, no hooks needed here.
    }

    public function scan() {
        $report = [];
        $patterns = $this->get_patterns();
        
        // Scan active theme and all plugins
        $scan_paths = [
            get_stylesheet_directory() => 'Theme',
            WP_PLUGIN_DIR => 'Plugins'
        ];

        foreach ($scan_paths as $path => $type) {
            $iterator = new RecursiveIteratorIterator(
                new RecursiveDirectoryIterator($path, RecursiveDirectoryIterator::SKIP_DOTS),
                RecursiveIteratorIterator::LEAVES_ONLY
            );

            foreach ($iterator as $file) {
                if ($file->isDir() || !in_array($file->getExtension(), ['php', 'js'])) {
                    continue;
                }

                $content = file_get_contents($file->getPathname());
                if (empty($content)) continue;

                foreach ($patterns as $pattern => $description) {
                    if (preg_match($pattern, $content)) {
                        $report[] = [
                            'file' => str_replace(ABSPATH, '', $file->getPathname()),
                            'reason' => $description,
                            'type' => $type
                        ];
                        // Move to next file once a match is found
                        continue 2;
                    }
                }
            }
        }
        
        if (empty($report)) {
            return ['report' => 'Scan complete. No suspicious patterns found.'];
        }

        // Format the report
        $formatted_report = "Scan complete. Found " . count($report) . " suspicious item(s):\n\n";
        foreach ($report as $item) {
            $formatted_report .= "File: {$item['file']}\n";
            $formatted_report .= "Reason: {$item['reason']}\n";
            $formatted_report .= "--------------------------------------------------\n";
        }
        
        return ['report' => $formatted_report];
    }
    
    private function get_patterns() {
        return [
            // Potentially malicious functions often used with obfuscation
            '/(eval|base64_decode|gzuncompress|gzinflate|str_rot13)\s*\(/i' => 'Suspicious function call (eval, base64_decode, etc.)',
            // PHP execution via preg_replace (deprecated but still seen)
            '/preg_replace\s*\(\s*[\'"].*[\'"]\s*,\s*[\'"].*[\'"]\s*,\s*.*\s*,\s*[\'"]e[\'"]\s*\)/i' => 'preg_replace with /e modifier (Code Execution)',
            // Shell execution functions
            '/(shell_exec|exec|system|passthru|proc_open)\s*\(/i' => 'Shell command execution function',
            // Common malware keywords
            '/(c99_buff|r57_buff|phpjm|gumblar|hacked by)/i' => 'Known malware signature/keyword',
            // Hidden content via CSS
            '/<div[^>]+style\s*=\s*[\'"][^>]*display\s*:\s*none[^>]*[\'"]>/i' => 'Hidden div with "display:none"',
            // Remote file inclusion
            '/(include|require)(_once)?\s*\(?\s*[\'"](https|http|ftp):\/\//i' => 'Potential Remote File Inclusion (RFI)',
        ];
    }
}